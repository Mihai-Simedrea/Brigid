import {
  ChangeDetectionStrategy,
  Component,
  Input,
  OnInit,
} from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import {
  AuthenticateClient,
  LoginModel,
  RegisterModel,
} from 'src/app/autogenerated/api';
import { ValidationErrors } from '../../validations/validations';
import { Patterns } from '../../validations/regex';
import { RouteList } from 'src/app/utils/routes';
import { SnackBarService } from 'src/app/services/snackbar.service';

@Component({
  selector: 'app-auth-form',
  templateUrl: './auth-form.component.html',
  styleUrls: ['./auth-form.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class AuthFormComponent implements OnInit {
  @Input('authType') authType: boolean = true;

  logoPath: string = '../../../assets/images/logo.svg';
  moleculePath: string = '../../../../assets/images/auth/molecule.png';
  adnPath: string = '../../../../assets/images/auth/adn.png';

  subTitle: string = 'Begin your Journey';
  loginSubTitle: string = 'The greatest wealth is health';
  titleAlert: string = 'This field is required';
  successMessage: string = 'Your account was created successfully!';
  failMessage: string = 'The registration failed!';
  emailHintMessage: string =
    'An encrypted and autogenerated algorithm for decrypting your password will be sent here!';
  durationInSeconds: number = 3;

  formGroup: FormGroup;
  validationErrors = ValidationErrors;
  post: any = '';

  authSubscription: Subscription;

  constructor(
    private _formBuilder: FormBuilder,
    private readonly _auth: AuthenticateClient,
    private readonly _router: Router,
    private readonly _snackbarService: SnackBarService
  ) {}

  ngOnInit() {
    this.createForm();
  }

  createForm() {
    this.formGroup = this.authType
      ? this._formBuilder.group(
          {
            firstName: [null, [Validators.required]],
            lastName: [null, [Validators.required]],
            username: [null, [Validators.required]],
            email: [
              null,
              [
                Validators.required,
                Validators.pattern(Patterns.email),
                Validators.email,
              ],
            ],
            country: [null, [Validators.required]],
            password: [null, [Validators.required, this.checkPassword]],
            confirmPassword: [null, [Validators.required]],
          },
          {
            validators: this.checkPasswordMatch('password', 'confirmPassword'),
          }
        )
      : (this.formGroup = this._formBuilder.group({
          username: [null, [Validators.required]],
          email: [
            null,
            [
              Validators.required,
              Validators.pattern(Patterns.email),
              Validators.email,
            ],
          ],
          password: [null, [Validators.required]],
        }));
  }

  checkPassword(control: any) {
    const enteredPassword = control.value;
    return !Patterns.password.test(enteredPassword) && enteredPassword
      ? { requirements: true }
      : null;
  }

  checkPasswordMatch(controlName: string, matchingControlName: string) {
    return (formGroup: FormGroup) => {
      const control = formGroup.controls[controlName];
      const matchingControl = formGroup.controls[matchingControlName];

      return control.value !== matchingControl.value
        ? matchingControl.setErrors({ match: true })
        : matchingControl.setErrors(null);
    };
  }

  onLogin(post: any): void {
    this.post = post;

    const requestModel = this.post as LoginModel;

    if (requestModel !== null) {
      this._router.navigate([RouteList.dashboard]);
    }
  }

  onSubmit(post: any): void {
    this.post = post;

    const formData = {
      ...this.post,
      countryNumericCode: this.post.country.numericCode,
    };
    delete formData.country;
    const requestModel = formData as RegisterModel;

    if (requestModel !== null) {
      this.authSubscription = this._auth
        .registerDoctor(requestModel)
        .subscribe({
          next: () => {
            this._router.navigate([RouteList.login]);
            this._snackbarService.open(
              this.successMessage,
              this.durationInSeconds
            );
          },
          error: () => {
            this._snackbarService.open(
              this.failMessage,
              this.durationInSeconds
            );
          },
        });
    }
  }
}
