import {
  ChangeDetectionStrategy,
  Component,
  OnDestroy,
  OnInit,
} from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { AuthenticateClient, RegisterModel } from 'src/app/autogenerated/api';
import { ValidationErrors } from '../../validations/validations';
import { Patterns } from '../../validations/regex';
import { RouteList } from 'src/app/utils/routes';
import { SnackBarService } from 'src/app/services/snackbar.service';

@Component({
  selector: 'app-auth-form',
  templateUrl: './auth-form.component.html',
  styleUrls: ['./auth-form.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class AuthFormComponent implements OnInit, OnDestroy {
  logoPath: string = '../../../assets/images/logo.svg';
  subTitle: string = 'Begin your Journey';
  titleAlert: string = 'This field is required';
  successMessage: string = 'Your account was created successfully!';
  failMessage: string = 'The registration failed!';
  emailHintMessage: string =
    'An encrypted and autogenerated algorithm for decrypting your password will be sent here!';
  durationInSeconds: number = 3;

  formGroup: FormGroup;
  validationErrors = ValidationErrors;
  post: any = '';

  authSubscription: Subscription;

  constructor(
    private _formBuilder: FormBuilder,
    private readonly _auth: AuthenticateClient,
    private readonly _router: Router,
    private readonly _snackbarService: SnackBarService
  ) {}

  ngOnInit() {
    this.createForm();
  }

  createForm() {
    this.formGroup = this._formBuilder.group({
      firstName: [null, [Validators.required]],
      lastName: [null, [Validators.required]],
      username: [null, [Validators.required]],
      email: [
        null,
        [
          Validators.required,
          Validators.pattern(Patterns.email),
          Validators.email,
        ],
      ],
      country: [null, [Validators.required]],
      password: [null, [Validators.required, this.checkPassword]],
    });
  }

  checkPassword(control: any) {
    const enteredPassword = control.value;
    return !Patterns.password.test(enteredPassword) && enteredPassword
      ? { requirements: true }
      : null;
  }

  onSubmit(post: any): void {
    this.post = post;

    const formData = {
      ...this.post,
      countryNumericCode: this.post.country.numericCode,
    };
    delete formData.country;
    const requestModel = formData as RegisterModel;

    if (requestModel !== null) {
      this.authSubscription = this._auth
        .registerDoctor(requestModel)
        .subscribe({
          next: () => {
            this._router.navigate([RouteList.login]);
            this._snackbarService.open(
              this.successMessage,
              this.durationInSeconds
            );
          },
          error: () => {
            this._snackbarService.open(
              this.failMessage,
              this.durationInSeconds
            );
          },
        });
    }
  }

  ngOnDestroy(): void {
    this.authSubscription.unsubscribe();
  }
}
